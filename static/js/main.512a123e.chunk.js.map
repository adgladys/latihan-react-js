{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","timer","setTimer","isActive","setIsActive","increment","useRef","handleStart","current","setInterval","handlePause","clearInterval","handleResume","handleReset","console","log","className","centiSeconds","slice","seconds","Math","floor","minutes","formatTime","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAiNeA,EA7MH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEgBF,oBAAS,GAFzB,mBAETG,EAFS,KAECC,EAFD,KAGVC,EAAiBC,iBAAO,MAExBC,EAAc,WAClBH,GAAY,GACZC,EAAUG,QAAUC,aAAY,WAC9BP,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,KAGCS,EAAc,WAClBN,GAAY,GACZO,cAAcN,EAAUG,UAGpBI,EAAe,WACnBR,GAAY,GACZC,EAAUG,QAAUC,aAAY,WAC9BP,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,KAGCY,EAAc,WAClBF,cAAcN,EAAUG,SACxBJ,GAAY,GACZF,EAAS,IAGXY,QAAQC,IAAI,QAASd,GA8BrB,OACE,qBAAKe,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,uBACA,qBAAKA,UAAU,oBAAf,SAjCa,WACjB,IAAMC,EAAe,WAAIhB,EAAQ,KAAMiB,OAAO,GACxCC,EAAU,WAAIC,KAAKC,MAAMpB,EAAQ,KAAO,IAAKiB,OAAO,GACpDI,EAAU,WAAIF,KAAKC,MAAMpB,EAAQ,IAAO,KAAMiB,OAAO,GAE3D,MAAM,GAAN,OAAUI,EAAV,cAAuBH,EAAvB,cAAoCF,GA6B7BM,KAzBFpB,GAAsB,IAAVF,GAILE,GAAYF,EAAQ,EAE5B,qCACE,wBAAQuB,QAASZ,EAAjB,oBACA,wBAAQY,QAASX,EAAjB,sBAMJ,mCACE,wBAAQW,QAASd,EAAjB,qBAbA,wBAAQc,QAAWjB,EAAnB,yBChCOkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAmC1Bb,K","file":"static/js/main.512a123e.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => {\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const increment: any = useRef(null);\n\n  const handleStart = () => {\n    setIsActive(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 10)\n  }\n\n  const handlePause = () => {\n    setIsActive(false)\n    clearInterval(increment.current)\n  }\n\n  const handleResume = () => {\n    setIsActive(true);\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 10)\n  }\n\n  const handleReset = () => {\n    clearInterval(increment.current);\n    setIsActive(false);\n    setTimer(0);\n  }\n\n  console.log(\"timer\", timer);\n  const formatTime = () => {\n    const centiSeconds = `0${timer % 100}`.slice(-2)\n    const seconds = `0${Math.floor(timer / 100) % 60}`.slice(-2)\n    const minutes = `0${Math.floor(timer / 6000 % 60)}`.slice(-2)\n\n    return `${minutes} : ${seconds} : ${centiSeconds}`\n  }\n\n  const renderingBtn = () => {\n    if (!isActive && timer === 0) {\n      return (\n        <button onClick = {handleStart}>Start</button>\n      )\n    } else if (!isActive && timer > 0) {\n      return (\n        <>\n          <button onClick={handleResume}>Resume</button>\n          <button onClick={handleReset}>Reset</button>\n        </>\n      )\n    }\n\n    return (\n      <>\n        <button onClick={handlePause}>Pause</button>\n      </>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Stopwatch\">\n        <div className=\"Stopwatch-header\">Stopwatch</div>\n        <div className=\"Stopwatch-display\">\n          {formatTime()}\n        </div>\n        {renderingBtn()}\n      </div>\n    </div>\n  )\n}\n\n//week 8\n// interface IAppState {\n//   fullname: string;\n//   age: string;\n// }\n\n// class App extends React.Component<{}, IAppState> {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       fullname: '',\n//       age: '',\n//     }\n//   }\n\n//   handleBtnClick = () => {\n//     alert(`${this.state.fullname} ${this.state.age}`)\n//   }\n\n//   handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     const {name} = event.target;\n//     const {value} = event.target;\n\n//     const newState = {...this.state};\n//     newState[name] = value;\n\n//     this.setState(newState);\n//   }\n\n//   public render() {\n//     return (\n//       <div className = \"App\">\n//         <header className = \"App-header\">\n//           <img src={logo} className = \"App-logo\" alt= \"logo\" />\n//           <form>\n//             <input name= \"fullname\" value={this.state.fullname} placeholder=\"type fullname here\" onChange={this.handleChange} />\n//             <br/>\n//             <input name=\"age\" value={this.state.age} placeholder=\"type age here\" onChange={this.handleChange} />\n//             <br/>\n//             <button type=\"button\" onClick={this.handleBtnClick}>SAVE</button>\n//           </form>\n//         </header>\n//       </div>\n//     )\n//   }\n// }\n\n\n//week 7\n// interface IData {\n//   id: string;\n//   name: string;\n//   email: string;\n// }\n\n// interface IAppState {\n//   showTable: boolean;\n// }\n\n// interface IAppProps {\n//   data: IData[]\n// }\n\n// class App extends React.Component<IAppProps, IAppState>{\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       showTable: true,\n//     }\n//   }\n\n//   componentDidMount() {\n//     alert(\"did mount App component !\")\n//   }\n\n//   componentWillUnmount() {\n//     alert(\"unmounting App component !\")\n//   }\n\n//   componentDidUpdate(){\n//     alert(\"did update called !\")\n//   }\n\n//   public toggleShowTable = () => {\n//     const {showTable} = this.state;\n//     this.setState({showTable: !showTable});\n//   };\n\n//   public renderRow = () => {\n//     return this.props.data.map((item) => {\n//       return (\n//         <tr>\n//           <td>{item.id}</td>\n//           <td>{item.name}</td>\n//           <td>{item.email}</td>\n//         </tr>\n//       )\n//     })\n//   }\n\n//   public renderTable = () => {\n//     if (this.state.showTable) {\n//       return (\n//         <table className = \"table\">\n//           <thead>\n//             <tr>\n//               <td>id</td>\n//               <td>name</td>\n//               <td>email</td>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {this.renderRow()}\n//           </tbody>\n//         </table>\n//       )\n//     }\n//   }\n\n//   public render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           {this.renderTable()}\n//           <button onClick={this.toggleShowTable}>test</button>\n//         </header>\n//       </div>\n//     );\n//   };\n// };\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// week 8\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n\n// week 7\n// const dataDummy = [\n//   {\n//     id: \"1\",\n//     name: \"John\",\n//     email: \"john@gmail.com\"\n//   },\n//   {\n//     id: \"1\",\n//     name: \"Frau\",\n//     email: \"frau@gmail.com\"\n//   },\n// ]\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App data={dataDummy} />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}